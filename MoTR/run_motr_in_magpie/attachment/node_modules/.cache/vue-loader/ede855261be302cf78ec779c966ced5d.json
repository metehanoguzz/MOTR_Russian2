{"remainingRequest":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/magpie-base/src/components/interactive/Chat.vue?vue&type=style&index=0&id=5a37f8b2&lang=css&","dependencies":[{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/magpie-base/src/components/interactive/Chat.vue","mtime":1697083068962},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/css-loader/dist/cjs.js","mtime":1697083066807},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1697083068254},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/postcss-loader/src/index.js","mtime":1697083067065},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/cache-loader/dist/cjs.js","mtime":1697083066270},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/index.js","mtime":1697083068088}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jaGF0IHsKICB3aWR0aDogNDUwcHg7Cn0KCi5jaGF0LWJveCB7CiAgb3ZlcmZsb3c6IGF1dG87CiAgaGVpZ2h0OiA0MDBweDsKfQoKLnVzZXJFdmVudCB7CiAgd2lkdGg6IDQ1JTsKICBjbGVhcjogYm90aDsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgbWFyZ2luOiA1cHggYXV0bzsKfQoKLnVzZXJFdmVudC5tZSB7CiAgY29sb3I6ICM3MGJhNTE3YSAhaW1wb3J0YW50Owp9CgoubWVzc2FnZSB7CiAgd2lkdGg6IDU1JTsKICBmbG9hdDogbGVmdDsKICB0ZXh0LWFsaWduOiBsZWZ0OwogIGJhY2tncm91bmQ6ICM1MTg3YmE3YTsKICBib3JkZXItcmFkaXVzOiA0cHg7CiAgcGFkZGluZzogNHB4OwogIG1hcmdpbjogNXB4IDA7Cn0KCi5tZXNzYWdlLm1lIHsKICBmbG9hdDogcmlnaHQ7CiAgYmFja2dyb3VuZDogIzcwYmE1MTdhICFpbXBvcnRhbnQ7Cn0KCi5jaGF0LWlucHV0IHsKICBkaXNwbGF5OiBmbGV4Owp9CgouY2hhdC1pbnB1dCB0ZXh0YXJlYSB7CiAgZmxleC1ncm93OiAxOwogIGhlaWdodDogMzJweDsKfQoKLmNoYXQtaW5wdXQgYnV0dG9uIHsKICBtYXJnaW46IDA7Cn0K"},{"version":3,"sources":["Chat.vue"],"names":[],"mappings":";AAqLA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Chat.vue","sourceRoot":"node_modules/magpie-base/src/components/interactive","sourcesContent":["<docs>\nThis interactive component provides participants the opportunity to chat with each other, if they are in the same room.\n\n```vue\n<Experiment>\n    <Screen>\n      <button @click=\"$magpie.nextScreen()\">Start</button>\n    </Screen>\n\n    <ConnectInteractiveScreen />\n\n    <Screen>\n\n      <Slide>\n        <Chat :data.sync= \"$magpie.measurements.data\" />\n        <p>{{$magpie.measurements.data? $magpie.measurements.data.chatMessage.length : 0}} messages sent so far.</p>\n        <p>{{ $magpie.socket.active.length }} participants chatting.</p>\n      </Slide>\n\n    </Screen>\n\n</Experiment>\n```\n\n\n</docs>\n<template>\n  <div class=\"chat\">\n    <div ref=\"box\" class=\"chat-box\">\n      <p\n        v-for=\"(message, i) in messages\"\n        :key=\"i\"\n        :class=\"{\n          message: message.event === 'message',\n          userEvent: message.event === 'join' || message.event === 'leave',\n          me: message.participantId === $magpie.socket.participantId\n        }\"\n        :style=\"{\n          ...(message.message && {\n            background: $magpie.socket.getParticipantColor(\n              message.participantId\n            )\n          }),\n          ...(!message.message && {\n            color: $magpie.socket.getParticipantColor(message.participantId)\n          })\n        }\"\n        v-text=\"\n          message.message ||\n          (message.participantId === $magpie.socket.participantId\n            ? message.event === 'join'\n              ? $t('interactive.Chat.statusYouJoined')\n              : message.event === 'leave'\n              ? $t('interactive.Chat.statusYouLeft')\n              : ''\n            : message.event === 'join'\n            ? $t('interactive.Chat.statusParticipantJoined', {\n                user: $magpie.socket.getParticipantName(message.participantId)\n              })\n            : message.event === 'leave'\n            ? $t('interactive.Chat.statusParticipantLeft', {\n                user: $magpie.socket.getParticipantName(message.participantId)\n              })\n            : '')\n        \"\n      ></p>\n    </div>\n    <div class=\"chat-input\">\n      <textarea\n        ref=\"text\"\n        cols=\"50\"\n        :placeholder=\"$t('interactive.Chat.messageLabel')\"\n        @keydown.enter.prevent=\"send\"\n      ></textarea>\n      <button @click.stop=\"send()\">{{ $t('general.send') }}</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue';\nimport difference from 'lodash/difference';\nexport const EVENT_CHAT_MESSAGE = '$magpie.chat_message';\n\nexport default {\n  name: 'Chat',\n  props: {\n    participantLabel: {\n      type: String,\n      default: null\n    }\n  },\n  data() {\n    return {\n      messages: [],\n      interval: null\n    };\n  },\n  socket: {\n    [EVENT_CHAT_MESSAGE](payload) {\n      this.messages.push(payload);\n      Vue.nextTick(() => {\n        this.$refs.box.scrollTop = this.$refs.box.scrollHeight;\n      });\n      /**\n       * Messages contains all chat messages as objects: `[{message: '', participantId: '', time: 2345678765}, ...]`\n       */\n      this.$emit(\n        'update:messages',\n        this.messages.filter((m) => m.event === 'message')\n      );\n      /**\n       * Data contains all chat messages in tabular form: `{chatMessage: [], chatParticipantId: [], chatTime: []}`\n       */\n      this.$emit(\n        'update:data',\n        this.flattenData(this.messages.filter((m) => m.event === 'message'))\n      );\n    }\n  },\n  watch: {\n    ['$magpie.socket.active'](newParticipants, oldParticipants) {\n      const joined = difference(newParticipants, oldParticipants);\n      const left = difference(oldParticipants, newParticipants);\n      left.forEach((participantId) => {\n        this.messages.push({\n          time: Date.now(),\n          participantId,\n          event: 'leave',\n          message: ''\n        });\n      });\n      joined.forEach((participantId) => {\n        this.messages.push({\n          time: Date.now(),\n          participantId,\n          event: 'join',\n          message: ''\n        });\n      });\n    }\n  },\n  mounted() {\n    this.$magpie.socket.active.forEach((participantId) => {\n      this.messages.push({\n        time: Date.now(),\n        participantId,\n        event: 'join',\n        message: ''\n      });\n    });\n  },\n  EVENT_CHAT_MESSAGE,\n  methods: {\n    send() {\n      const message = this.$refs.text.value;\n      if (!message) {\n        return;\n      }\n      this.$magpie.socket.broadcast(EVENT_CHAT_MESSAGE, {\n        event: 'message',\n        message,\n        participantId: this.$magpie.socket.participantId,\n        participantLabel: this.participantLabel,\n        time: Date.now()\n      });\n      this.$refs.text.value = '';\n      this.$refs.text.focus();\n    },\n    flattenData(messages) {\n      return {\n        chatMessage: messages.map((m) => m.message),\n        chatParticipantId: messages.map((m) => m.participantId),\n        chatParticipantLabel: messages.map((m) => m.participantId),\n        chatTime: messages.map((m) => m.time)\n      };\n    }\n  }\n};\n</script>\n<style>\n.chat {\n  width: 450px;\n}\n\n.chat-box {\n  overflow: auto;\n  height: 400px;\n}\n\n.userEvent {\n  width: 45%;\n  clear: both;\n  text-align: center;\n  margin: 5px auto;\n}\n\n.userEvent.me {\n  color: #70ba517a !important;\n}\n\n.message {\n  width: 55%;\n  float: left;\n  text-align: left;\n  background: #5187ba7a;\n  border-radius: 4px;\n  padding: 4px;\n  margin: 5px 0;\n}\n\n.message.me {\n  float: right;\n  background: #70ba517a !important;\n}\n\n.chat-input {\n  display: flex;\n}\n\n.chat-input textarea {\n  flex-grow: 1;\n  height: 32px;\n}\n\n.chat-input button {\n  margin: 0;\n}\n</style>\n"]}]}