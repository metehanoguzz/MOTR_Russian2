{"remainingRequest":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/magpie-base/src/components/inputs/MultipleChoiceMatrixInput.vue?vue&type=style&index=0&id=4a26fb3b&prod&lang=css&","dependencies":[{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/magpie-base/src/components/inputs/MultipleChoiceMatrixInput.vue","mtime":1705539824088},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/css-loader/dist/cjs.js","mtime":1697083066807},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1697083068254},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/postcss-loader/src/index.js","mtime":1697083067065},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/cache-loader/dist/cjs.js","mtime":1697083066270},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/index.js","mtime":1697083068088}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5tYXRyaXgtY2hvaWNlIHsKICB0ZXh0LWFsaWduOiBsZWZ0OwogIHdpZHRoOiAxMDAlOwp9CgoubWF0cml4LWNob2ljZSAucm93IHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiByb3c7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKfQoKLm1hdHJpeC1jaG9pY2UgLnJvdyA+IDpmaXJzdC1jaGlsZCB7CiAgd2lkdGg6IDUwJTsKICB0ZXh0LWFsaWduOiByaWdodDsKfQoKLm1hdHJpeC1jaG9pY2UgLnJvdyBsYWJlbCB7CiAgd2lkdGg6IDUwcHg7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIGZvbnQtc2l6ZTogMTNweDsKICBtYXJnaW46IDAgMTBweDsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0K"},{"version":3,"sources":["MultipleChoiceMatrixInput.vue"],"names":[],"mappings":";AA4JA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MultipleChoiceMatrixInput.vue","sourceRoot":"node_modules/magpie-base/src/components/inputs","sourcesContent":["<docs>\n\n```vue\n<Experiment>\n    <Screen>\n\n      <Slide>\n        <MultipleChoiceMatrixInput\n            :options=\"['Not enjoyable', 'Rather not enjoyable', 'OK', 'Rather enjoyable', 'Really enjoyable']\"\n            :questions=\"[\n              'How is the weather today?',\n              'How was your breakfast today?',\n              'How do you like your job?',\n              'What is your opinion of television?',\n              'What is your opinion of folk music?'\n            ]\"\n            :responses.sync= \"$magpie.measurements.responses\"\n        />\n        <button @click=\"$magpie.saveAndNextScreen();\">Submit</button>\n      </Slide>\n\n    </Screen>\n\n    <DebugResultsScreen />\n\n</Experiment>\n```\n\nYou can also randomize the question order. The response data will still be in the order you supplied the questions in.\n\n```vue\n<Experiment>\n    <Screen>\n\n      <Slide>\n        <MultipleChoiceMatrixInput\n            :options=\"['Not enjoyable', 'Rather not enjoyable', 'OK', 'Rather enjoyable', 'Really enjoyable']\"\n            :questions=\"[\n              'How is the weather today?',\n              'How was your breakfast today?',\n              'How do you like your job?',\n              'What is your opinion of television?',\n              'What is your opinion of folk music?'\n            ]\"\n            :randomize=\"true\"\n            :responses.sync= \"$magpie.measurements.responses\"\n        />\n        <button @click=\"$magpie.saveAndNextScreen();\">Submit</button>\n      </Slide>\n\n    </Screen>\n\n    <DebugResultsScreen />\n</Experiment>\n```\n\n\n</docs>\n\n<template>\n  <div class=\"matrix-choice\">\n    <div class=\"row header\">\n      <p></p>\n      <div>\n        <label v-for=\"option in options\" :key=\"option\" v-text=\"option\" />\n      </div>\n    </div>\n    <template v-if=\"randomize\">\n      <template v-for=\"[question, i] in randomizedQuestions\">\n        <div :key=\"i\" class=\"row\">\n          <p>{{ question }}</p>\n          <MultipleChoiceInput\n            :labels=\"false\"\n            :options=\"options\"\n            orientation=\"horizontal\"\n            @update:response=\"onOptionClick(i, $event)\"\n          />\n        </div>\n      </template>\n    </template>\n    <template v-else>\n      <template v-for=\"(question, i) in questions\">\n        <div :key=\"i\" class=\"row\">\n          <p>{{ question }}</p>\n          <MultipleChoiceInput\n            :labels=\"false\"\n            :options=\"options\"\n            orientation=\"horizontal\"\n            @update:response=\"onOptionClick(i, $event)\"\n          />\n        </div>\n      </template>\n    </template>\n    <div class=\"row header\">\n      <p></p>\n      <div>\n        <label v-for=\"option in options\" :key=\"option\" v-text=\"option\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport shuffle from 'lodash/shuffle';\nimport MultipleChoiceInput from './MultipleChoiceInput';\nimport Vue from 'vue';\n/**\n * Have the participant choose between multiple options for multiple questions (arranged in a matrix).\n */\nexport default {\n  name: 'MultipleChoiceMatrixInput',\n  components: { MultipleChoiceInput },\n  props: {\n    /**\n     * The questions to ask\n     */\n    questions: {\n      type: Array,\n      required: true\n    },\n    /**\n     * The possible answers to choose from\n     */\n    options: {\n      type: Array,\n      required: true\n    },\n    /**\n     * Whether to shuffle questions\n     */\n    randomize: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      responses: [],\n      randomizedQuestions: shuffle(\n        this.questions.map((question, i) => [question, i])\n      )\n    };\n  },\n  methods: {\n    onOptionClick(i, response) {\n      Vue.set(this.responses, i, response);\n      /**\n       * Change event with the chosen options.\n       */\n      this.$emit('update:responses', this.responses);\n    }\n  }\n};\n</script>\n\n<style>\n.matrix-choice {\n  text-align: left;\n  width: 100%;\n}\n\n.matrix-choice .row {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.matrix-choice .row > :first-child {\n  width: 50%;\n  text-align: right;\n}\n\n.matrix-choice .row label {\n  width: 50px;\n  display: inline-block;\n  font-size: 13px;\n  margin: 0 10px;\n  text-align: center;\n}\n</style>\n"]}]}