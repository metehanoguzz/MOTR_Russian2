{"remainingRequest":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/src/App.vue","mtime":1699855711873},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/cache-loader/dist/cjs.js","mtime":1697083066270},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1697083068273},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/cache-loader/dist/cjs.js","mtime":1697083066270},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/index.js","mtime":1697083068088}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHsKICB2YXIgX3ZtID0gdGhpcywKICAgIF9jID0gX3ZtLl9zZWxmLl9jCiAgcmV0dXJuIF9jKAogICAgIkV4cGVyaW1lbnQiLAogICAgeyBhdHRyczogeyB0aXRsZTogIk1vdXNlIHRyYWNraW5nIGZvciBSZWFkaW5nIiB9IH0sCiAgICBbCiAgICAgIF9jKAogICAgICAgICJTY3JlZW4iLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW5zdHJ1Y3Rpb25zIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHRpdGxlOiAiV2VsY29tZSIsCiAgICAgICAgICAgIHZhbGlkYXRpb25zOiB7CiAgICAgICAgICAgICAgU3ViamVjdElEOiB7CiAgICAgICAgICAgICAgICBtaW5MZW5ndGg6IF92bS4kbWFncGllLnYubWluTGVuZ3RoKDIpLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICI0MGVtIiwgbWFyZ2luOiAiYXV0byIgfSB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kLWNvbG9yIjogImxpZ2h0Z3JleSIsCiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICIxMHB4IiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX2MoImIiLCBbX3ZtLl92KCIgSW5mb3JtYXRpb24gQWJvdXQgdGhpcyBTdHVkeSAiKV0pXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIFdlIHdvdWxkIGxpa2UgdG8gYXNrIHlvdSBpZiB5b3UgYXJlIHdpbGxpbmcgdG8gcGFydGljaXBhdGUgaW4gb3VyIHJlc2VhcmNoIHByb2plY3QuIFlvdXIgcGFydGljaXBhdGlvbiBpcyB2b2x1bnRhcnkuIFBsZWFzZSByZWFkIHRoZSB0ZXh0IGJlbG93IGNhcmVmdWxseSBhbmQgYXNrIHRoZSBjb25kdWN0aW5nIHBlcnNvbiBhYm91dCBhbnl0aGluZyB5b3UgZG8gbm90IHVuZGVyc3RhbmQgb3Igd291bGQgbGlrZSB0byBrbm93LiAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIldoYXQgaXMgaW52ZXN0aWdhdGVkIGFuZCBob3c/IildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIFlvdSBhcmUgYmVpbmcgYXNrZWQgdG8gdGFrZSBwYXJ0IGluIGEgcmVzZWFyY2ggc3R1ZHkgYmVpbmcgZG9uZSBieSBFdGhhbiBXaWxjb3gsIGEgcmVzZWFyY2hlciBhdCB0aGUgU3dpc3MgRmVkZXJhbCBJbnN0aXR1dGUgb2YgVGVjaG5vbG9neS4gVGhpcyBzdHVkeSB3aWxsIGhlbHAgdXMgbGVhcm4gYWJvdXQgaG93IHBlb3BsZSByZWFkLiBJdCB3aWxsIHRha2UgeW91IGFyb3VuZCAyMCBtaW51dGVzIHRvIGNvbXBsZXRlLiAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIldobyBjYW4gcGFydGljaXBhdGU/IildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIFlvdSBjYW4gcGFydGljaXBhdGUgb25seSBpZiB5b3UgYXJlIGFuIGFkdWx0IG5hdGl2ZSBzcGVha2VyIG9mIEVuZ2xpc2guICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiV2hhdCBhbSBJIHN1cHBvc2VkIHRvIGRvIGFzIGEgcGFydGljaXBhbnQ/IildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIElmIHlvdSBjaG9vc2UgdG8gYmUgaW4gdGhlIHN0dWR5LCB5b3Ugd2lsbCB1c2UgdGhlIGNvbXB1dGVyIG1vdXNlIHRvIHJlYWQgc2VudGVuY2VzIGluIEVuZ2xpc2ggYW5kIGFuc3dlciBxdWVzdGlvbnMgYWJvdXQgdGhlbS4gIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJXaGF0IGFyZSBteSByaWdodHMgZHVyaW5nIHBhcnRpY2lwYXRpb24/IildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIFlvdXIgcGFydGljaXBhdGlvbiBpbiB0aGlzIHN0dWR5IGlzIHZvbHVudGFyeS4gSWYgeW91IGNob29zZSB0byBwYXJ0aWNpcGF0ZSwgeW91IG1heSBjaGFuZ2UgeW91ciBtaW5kIGFuZCBsZWF2ZSB0aGUgc3R1ZHkgYXQgYW55IHRpbWUgYnkgY2xvc2luZyB0aGUgd2ViIHBhZ2Ugd2l0aG91dCBzcGVjaWZ5aW5nIHJlYXNvbnMgYW5kIHdpdGhvdXQgYW55IGRpc2FkdmFudGFnZXMuICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiV2hhdCByaXNrcyBhbmQgYmVuZWZpdHMgY2FuIEkgZXhwZWN0PyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBUaGVyZSBhcmUgbm8gZm9yZXNlZWFibGUgcmlza3MgZm9yIHBhcnRpY2lwYXRpbmcgaW4gdGhpcyBzdHVkeS4gIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJXaWxsIEkgYmUgY29tcGVuc2F0ZWQgZm9yIHBhcnRpY2lwYXRpbmc/IildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIElmIHlvdSBwYXJ0aWNpcGF0ZSB5b3Ugd2lsbCBiZSBjb21wZW5zYXRlZCBmb3IgeW91ciB0aW1lIGZvbGxvd2luZyB0aGUgYW1vdW50IHNwZWNpZmllZCBvbiBwcm9saWZpYy5jby4gIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoImIiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIldoYXQgZGF0YSBpcyBjb2xsZWN0ZWQgZnJvbSBtZSBhbmQgaG93IGlzIGl0IHVzZWQ/IiksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBEdXJpbmcgdGhpcyBzdHVkeSwgd2Ugd2lsbCB0cmFjayB0aGUgcG9zaXRpb24gb2YgeW91ciBtb3VzZSBvbiBzY3JlZW4uIFRoZSBkYXRhIGZyb20gdGhpcyBzdHVkeSBtYXkgYmUgcHJlc2VudGVkIGF0IHNjaWVudGlmaWMgY29uZmVyZW5jZXMgYW5kIHB1Ymxpc2hlZCBpbiBzY2llbnRpZmljIGpvdXJuYWxzLCBhcyB3ZWxsIGFzIGluIG9ubGluZSByZXBvc2l0b3JpZXMuIEFsbCBkYXRhIHdpbGwgcmVtYWluIGFub255bW91cy4gTWVtYmVycyBvZiB0aGUgRVRIIFp1cmljaCBFdGhpY3MgQ29tbWlzc2lvbiBtYXkgYWNjZXNzIHRoZSBvcmlnaW5hbCBkYXRhIGZvciBleGFtaW5hdGlvbiBwdXJwb3Nlcy4gU3RyaWN0IGNvbmZpZGVudGlhbGl0eSB3aWxsIGJlIG9ic2VydmVkIGF0IGFueSB0aW1lLiAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIiBXaGF0IGFyZSBteSByaWdodHMgdG8gbXkgcGVyc29uYWwgZGF0YT8gIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIFlvdSBjYW4gcmVxdWVzdCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGVyc29uYWwgZGF0YSBjb2xsZWN0ZWQgZnJvbSB5b3UgYXQgYW55IHRpbWUgYW5kIHdpdGhvdXQgZ2l2aW5nIHJlYXNvbnMuIFlvdSBjYW4gYWxzbyByZXF1ZXN0IHRoYXQgaXQgYmUgcmVjdGlmaWVkLCBoYW5kZWQgb3ZlciB0byB5b3UsIGJhcnJlZCBmb3IgcHJvY2Vzc2luZyBvciBlcmFzZWQuIFRvIGRvIHNvLCBwbGVhc2UgY29udGFjdCB0aGUgcGVyc29uIGluZGljYXRlZCBiZWxvdy4gIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJXaG8gZnVuZHMgdGhpcyBzdHVkeT8iKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgVGhpcyBzdHVkeSBpcyBmdW5kZWQgYnkgYW4gRVRIIFBvc3Rkb2N0b3JhbCBGZWxsb3dzaGlwIGdyYW50LCBhd2FyZGVkIHRvIEV0aGFuIFdpbGNveC4gIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCIgSG93IGFtIEkgaW5zdXJlZD8gIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIEFsdGhvdWdoIHRoZXJlIGFyZSBubyBmb3Jlc2VlYWJsZSByaXNrcyBmb3IgcGFydGljaXBhdGlvbiwgYW55IGFkdmVyc2UgaGVhbHRoIGVmZmVjdHMgdGhhdCBhcmUgZGlyZWN0bHkgY2F1c2VkIGJ5IGEgc3R1ZHkgYW5kIGNhbiBiZSBkZW1vbnN0cmF0ZWQgdG8gYmUgYXR0cmlidXRhYmxlIHRvIGZhdWx0IG9uIHRoZSBwYXJ0IG9mIHRoZSBwcm9qZWN0IHRlYW0gb3IgRVRIIFp1cmljaCBhcmUgY292ZXJlZCBieSBFVEgncyBsaWFiaWxpdHkgaW5zdXJhbmNlLiAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIiBXaG8gcmV2aWV3ZWQgdGhpcyBzdHVkeT8gIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIFRoaXMgc3R1ZHkgd2FzIGV4YW1pbmVkIGJ5IHRoZSBFVEggWnVyaWNoIEV0aGljcyBDb21taXNzaW9uIGFzIHByb3Bvc2FsIEVLIDIwMjMtTi0wMyAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIiBDb21wbGFpbnRzIE9mZmljZToiKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgVGhlIHNlY3JldGFyaWF0IG9mIHRoZSBFVEggWnVyaWNoIEV0aGljcyBDb21taXR0ZWUgaXMgYXZhaWxhYmxlIHRvIGhlbHAgeW91IHdpdGggY29tcGxhaW50cyBpbiBjb25uZWN0aW9uIHdpdGggeW91ciBwYXJ0aWNpcGF0aW9uLiBDb250YWN0OiBldGhpY3NAc2wuZXRoei5jaCBvciAwMDQxIDQ0IDYzMiA4NSA3Mi4gIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCIgR2VuZXJhbCBDb250YWN0OiAiKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgRXRoYW4gR290bGllYiBXaWxjb3gsIERlcGFydG1lbnQgb2YgQ29tcHV0ZXIgU2NpZW5jZSwgRVRIIFp1cmljaCwgT0FTIEsuMjAsIEJpbnptw7xobGVzdHJhc3NlIDEzLCA4MDUwIFrDvHJpY2gsIFN3aXR6ZXJsYW5kLCBldGhhbi53aWxjb3hAaW5mLmV0aHouY2ggIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgImJhY2tncm91bmQtY29sb3IiOiAibGlnaHRncmV5IiwKICAgICAgICAgICAgICAgICAgcGFkZGluZzogIjEwcHgiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfYygiYiIsIFtfdm0uX3YoIiBDb25zZW50IEZvcm0gIildKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEksIHRoZSBwYXJ0aWNpcGFudCwgY29uZmlybSBieSBjbGlja2luZyB0aGUgYnV0dG9uIGJlbG93OiAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNTdHlsZTogeyAicGFkZGluZy1sZWZ0IjogIjMwcHgiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIg4oCiIEkgaGF2ZSByZWFkIGFuZCB1bmRlcnN0b29kIHRoZSBzdHVkeSBpbmZvcm1hdGlvbi4gTXkgcXVlc3Rpb25zIGhhdmUgYmVlbiBhbnN3ZXJlZCBjb21wbGV0ZWx5IGFuZCB0byBteSBzYXRpc2ZhY3Rpb24uICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljU3R5bGU6IHsgInBhZGRpbmctbGVmdCI6ICIzMHB4IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAi4oCiIEkgY29tcGx5IHdpdGggdGhlIGluY2x1c2lvbiBhbmQgZXhjbHVzaW9uIGNyaXRlcmlhIGZvciBwYXJ0aWNpcGF0aW9uIGRlc2NyaWJlZCBhYm92ZS4gSSBhbSBhd2FyZSBvZiB0aGUgcmVxdWlyZW1lbnRzIGFuZCByZXN0cmljdGlvbnMgdG8gYmUgb2JzZXJ2ZWQgZHVyaW5nIHRoZSBzdHVkeS4gIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNTdHlsZTogeyAicGFkZGluZy1sZWZ0IjogIjMwcHgiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICLigKIgSSBoYXZlIGhhZCBlbm91Z2ggdGltZSB0byBkZWNpZGUgYWJvdXQgbXkgcGFydGljaXBhdGlvbi4gIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNTdHlsZTogeyAicGFkZGluZy1sZWZ0IjogIjMwcHgiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICLigKIgSSBwYXJ0aWNpcGF0ZSBpbiB0aGlzIHN0dWR5IHZvbHVudGFyaWx5IGFuZCBjb25zZW50IHRoYXQgbXkgcGVyc29uYWwgZGF0YSBiZSB1c2VkIGFzIGRlc2NyaWJlZCBhYm92ZS4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY1N0eWxlOiB7ICJwYWRkaW5nLWxlZnQiOiAiMzBweCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIuKAoiBJIHVuZGVyc3RhbmQgdGhhdCBJIGNhbiBzdG9wIHBhcnRpY2lwYXRpbmcgYXQgYW55IG1vbWVudC4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiUGxlYXNlIGVudGVyIHlvdXIgV29ya2VyIElEIHRvIGNvbnRpbnVlOsKgIildKSwKICAgICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS4kbWFncGllLm1lYXN1cmVtZW50cy5TdWJqZWN0SUQsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJG1hZ3BpZS5tZWFzdXJlbWVudHMuU3ViamVjdElEIiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm9ibGlnYXRvcnkiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBuYW1lOiAiVHVya0lEIiwgdHlwZTogInRleHQiIH0sCiAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uJG1hZ3BpZS5tZWFzdXJlbWVudHMuU3ViamVjdElEIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICBfdm0uJHNldCgKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRtYWdwaWUubWVhc3VyZW1lbnRzLAogICAgICAgICAgICAgICAgICAgICAgICAiU3ViamVjdElEIiwKICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJQbGVhc2UgYW5zd2VyIHRoZSBxdWVzdGlvbnMgYmVsb3csIGFuZCB0aGVuIGNsaWNrIHRoZSBidXR0b24gdG8gc3RhcnQgdGhlIHByYWN0aWNlIHNlc3Npb24uIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIEkgYW0gX19fX18geWVhcnMgb2xkLiAiKSwKICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLiRtYWdwaWUubWVhc3VyZW1lbnRzLkFnZSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIkbWFncGllLm1lYXN1cmVtZW50cy5BZ2UiLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAib2JsaWdhdG9yeSIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIkFnZSIsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogIm51bWJlciIsCiAgICAgICAgICAgICAgICAgICAgaW5wdXRtb2RlOiAibnVtZXJpYyIsCiAgICAgICAgICAgICAgICAgICAgbWluOiAiMTgiLAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLiRtYWdwaWUubWVhc3VyZW1lbnRzLkFnZSB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kbWFncGllLm1lYXN1cmVtZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgIkFnZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2YWxpZGl0eSIgfSksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIgSSBjdXJyZW50bHkgbGl2ZSBpbiBhIFJ1c3NpYW4tc3BlYWtpbmcgY291bnRyeS4gwqAgIiksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAic2VsZWN0IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLiRtYWdwaWUubWVhc3VyZW1lbnRzLlJ1c3NpYW5Db3VudHJ5LAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiRtYWdwaWUubWVhc3VyZW1lbnRzLlJ1c3NpYW5Db3VudHJ5IiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24gKG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9ICJfdmFsdWUiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBfdm0uJHNldCgKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRtYWdwaWUubWVhc3VyZW1lbnRzLAogICAgICAgICAgICAgICAgICAgICAgICAiUnVzc2lhbkNvdW50cnkiLAogICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQudGFyZ2V0Lm11bHRpcGxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAkJHNlbGVjdGVkVmFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAkJHNlbGVjdGVkVmFsWzBdCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJvcHRpb24iLCB7IGF0dHJzOiB7IGRpc2FibGVkOiAiIiwgdmFsdWU6ICIiIH0gfSksCiAgICAgICAgICAgICAgICAgIF9jKCJvcHRpb24iLCBbX3ZtLl92KCJZZXMiKV0pLAogICAgICAgICAgICAgICAgICBfYygib3B0aW9uIiwgW192bS5fdigiTm8iKV0pLAogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uJG1hZ3BpZS5tZWFzdXJlbWVudHMuUnVzc2lhbkNvdW50cnkgPT0gIk5vIgogICAgICAgICAgICA/IF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiSG93IGxvbmcgaGF2ZSB5b3UgbGl2ZWQgaW4gYSBub24tUnVzc2lhbi1zcGVha2luZyBjb3VudHJ5PyDCoCAiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLiRtYWdwaWUubWVhc3VyZW1lbnRzLlJ1c3NpYW5Db3VudHJ5MiwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiRtYWdwaWUubWVhc3VyZW1lbnRzLlJ1c3NpYW5Db3VudHJ5MiIsCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJvYmxpZ2F0b3J5IiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBuYW1lOiAiUnVzc2lhbkNvdW50cnkyIiwgdHlwZTogInRleHQiIH0sCiAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uJG1hZ3BpZS5tZWFzdXJlbWVudHMuUnVzc2lhbkNvdW50cnkyLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KAogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kbWFncGllLm1lYXN1cmVtZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgICAiUnVzc2lhbkNvdW50cnkyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBdKQogICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICAgIF92bS5fdigiIEkgYW0gdXNpbmcgYSBfX19fXy4gwqAgIiksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAic2VsZWN0IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLiRtYWdwaWUubWVhc3VyZW1lbnRzLk1vdXNlVHlwZSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIkbWFncGllLm1lYXN1cmVtZW50cy5Nb3VzZVR5cGUiLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLCBmdW5jdGlvbiAobykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvLnNlbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uJG1hZ3BpZS5tZWFzdXJlbWVudHMsCiAgICAgICAgICAgICAgICAgICAgICAgICJNb3VzZVR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQudGFyZ2V0Lm11bHRpcGxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAkJHNlbGVjdGVkVmFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAkJHNlbGVjdGVkVmFsWzBdCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJvcHRpb24iLCB7IGF0dHJzOiB7IGRpc2FibGVkOiAiIiwgdmFsdWU6ICIiIH0gfSksCiAgICAgICAgICAgICAgICAgIF9jKCJvcHRpb24iLCBbX3ZtLl92KCJNb3VzZSIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJvcHRpb24iLCBbX3ZtLl92KCJUcmFja3BhZCIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJvcHRpb24iLCBbX3ZtLl92KCJPdGhlciIpXSksCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS4kbWFncGllLm1lYXN1cmVtZW50cy5Nb3VzZVR5cGUgPT0gIk90aGVyIgogICAgICAgICAgICA/IF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJJZiBvdGhlciwgcGxlYXNlIHNwZWNpZnk6IMKgIMKgIildKSwKICAgICAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLiRtYWdwaWUubWVhc3VyZW1lbnRzLk1vdXNlVHlwZTIsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIkbWFncGllLm1lYXN1cmVtZW50cy5Nb3VzZVR5cGUyIiwKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm9ibGlnYXRvcnkiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG5hbWU6ICJNb3VzZVR5cGUyIiwgdHlwZTogInRleHQiIH0sCiAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS4kbWFncGllLm1lYXN1cmVtZW50cy5Nb3VzZVR5cGUyIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KAogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kbWFncGllLm1lYXN1cmVtZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgICAiTW91c2VUeXBlMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIiBNeSBkb21pbmFudCBoYW5kIGlzIF9fX19fLiDCoCAiKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJzZWxlY3QiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uJG1hZ3BpZS5tZWFzdXJlbWVudHMuSGFuZGVkbmVzcywKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIkbWFncGllLm1lYXN1cmVtZW50cy5IYW5kZWRuZXNzIiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24gKG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9ICJfdmFsdWUiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBfdm0uJHNldCgKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRtYWdwaWUubWVhc3VyZW1lbnRzLAogICAgICAgICAgICAgICAgICAgICAgICAiSGFuZGVkbmVzcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICAgICAgICA/ICQkc2VsZWN0ZWRWYWwKICAgICAgICAgICAgICAgICAgICAgICAgICA6ICQkc2VsZWN0ZWRWYWxbMF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIm9wdGlvbiIsIHsgYXR0cnM6IHsgZGlzYWJsZWQ6ICIiLCB2YWx1ZTogIiIgfSB9KSwKICAgICAgICAgICAgICAgICAgX2MoIm9wdGlvbiIsIFtfdm0uX3YoIkxlZnQiKV0pLAogICAgICAgICAgICAgICAgICBfYygib3B0aW9uIiwgW192bS5fdigiUmlnaHQiKV0pLAogICAgICAgICAgICAgICAgICBfYygib3B0aW9uIiwgW192bS5fdigiQm90aCIpXSksCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS4kbWFncGllLm1lYXN1cmVtZW50cy5TdWJqZWN0SUQgJiYKICAgICAgICAgICFfdm0uJG1hZ3BpZS52YWxpZGF0ZU1lYXN1cmVtZW50cy5TdWJqZWN0SUQuJGludmFsaWQKICAgICAgICAgICAgPyBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICIgQnkgY2xpY2tpbmcgb24gdGhlIGJ1dHRvbiBiZWxvdyB5b3UgY29uc2VudCB0byBwYXJ0aWNpcGF0aW5nIGluIHRoaXMgc3R1ZHk6ICIKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRtYWdwaWUuYWRkRXhwRGF0YSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgU3ViamVjdElkOiBfdm0uJG1hZ3BpZS5tZWFzdXJlbWVudHMuU3ViamVjdElELAogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBfdm0uJG1hZ3BpZS5hZGRFeHBEYXRhKHsKICAgICAgICAgICAgICAgICAgICAgICAgICBNb3VzZVR5cGU6IF92bS4kbWFncGllLm1lYXN1cmVtZW50cy5Nb3VzZVR5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kbWFncGllLmFkZEV4cERhdGEoewogICAgICAgICAgICAgICAgICAgICAgICAgIE1vdXNlVHlwZTI6IF92bS4kbWFncGllLm1lYXN1cmVtZW50cy5Nb3VzZVR5cGUyLAogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBfdm0uJG1hZ3BpZS5hZGRFeHBEYXRhKHsKICAgICAgICAgICAgICAgICAgICAgICAgICBSdXNzaWFuQ291bnRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kbWFncGllLm1lYXN1cmVtZW50cy5SdXNzaWFuQ291bnRyeSwKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRtYWdwaWUuYWRkRXhwRGF0YSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgUnVzc2lhbkNvdW50cnkyOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRtYWdwaWUubWVhc3VyZW1lbnRzLlJ1c3NpYW5Db3VudHJ5MiwKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRtYWdwaWUuYWRkRXhwRGF0YSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgSGFuZGVkbmVzczogX3ZtLiRtYWdwaWUubWVhc3VyZW1lbnRzLkhhbmRlZG5lc3MsCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kbWFncGllLm5leHRTY3JlZW4oKQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgUHJvY2VlZCAiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKCJJbnN0cnVjdGlvblNjcmVlbiIsIHsgYXR0cnM6IHsgdGl0bGU6ICJJbnN0cnVjdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJbiB0aGlzIHN0dWR5LCB5b3Ugd2lsbCByZWFkIHNob3J0IHRleHRzIGFuZCBhbnN3ZXIgcXVlc3Rpb25zIGFib3V0IHRoZW0uIEhvd2V2ZXIsIHVubGlrZSBpbiBub3JtYWwgcmVhZGluZywgdGhlIHRleHRzIHdpbGwgYmUgYmx1cnJlZC4gSW4gb3JkZXIgdG8gYnJpbmcgdGhlIHRleHQgaW50byBmb2N1cyBtb3ZlIHlvdXIgbW91c2Ugb3ZlciBpdC4gVGFrZSBhcyBtdWNoIHRpbWUgdG8gcmVhZCB0aGUgdGV4dCBhcyB5b3UgbmVlZCBpbiBvcmRlciB0byB1bmRlcnN0YW5kIGl0LiBXaGVuIHlvdSBhcmUgZG9uZSByZWFkaW5nLCBhbnN3ZXIgdGhlIHF1ZXN0aW9uIGF0IHRoZSBib3R0b20gYW5kIGNsaWNrIOKAnG5leHTigJ0gdG8gbW92ZSBvbi4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl9sKF92bS50cmlhbHMsIGZ1bmN0aW9uICh0cmlhbCwgaSkgewogICAgICAgIHJldHVybiBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlNjcmVlbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBrZXk6IGksCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYWluX3NjcmVlbiIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgcHJvZ3Jlc3M6IGkgLyBfdm0udHJpYWxzLmxlbmd0aCB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiU2xpZGUiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZm9ybSIsIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIml0ZW1faWQiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImhpZGRlbiIgfSwKICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiB0cmlhbC5pdGVtX2lkIH0sCiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJleHBlcmltZW50X2lkIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJoaWRkZW4iIH0sCiAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogdHJpYWwuZXhwZXJpbWVudF9pZCB9LAogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29uZGl0aW9uX2lkIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJoaWRkZW4iIH0sCiAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogdHJpYWwuY29uZGl0aW9uX2lkIH0sCiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm92YWwtY3Vyc29yIiB9KSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF92bS5zaG93Rmlyc3REaXYKICAgICAgICAgICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyZWFkaW5nVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3VzZW1vdmU6IF92bS5tb3ZlQ3Vyc29yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3VzZWxlYXZlOiBfdm0uY2hhbmdlQmFjaywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX2woCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWFsLnRleHQuc3BsaXQoIiAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHdvcmQsIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLWluZGV4IjogaW5kZXggfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiICIgKyBfdm0uX3Mod29yZCkgKyAiICIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJibHVycnktbGF5ZXIiLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6ICIwLjMiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcjogImJsdXIoMy41cHgpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAiYWxsIDAuM3MgbGluZWFyIDBzIiwKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgIiArIF92bS5fcyh0cmlhbC50ZXh0KSArICIgIildCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgX3ZtLnNob3dGaXJzdERpdgogICAgICAgICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogIjQwJSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICJ0cmFuc2xhdGUoLTUwJSwgLTUwJSkiLAogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZGlzYWJsZWQ6ICFfdm0uaGFzUmVhZCB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlhbC5xdWVzdGlvbiAhPT0gbnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gX3ZtLnRvZ2dsZURpdnMoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLnNhdmVBbmREaXNhYmxlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlhbC5xdWVzdGlvbiAhPT0gbnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAiQW5zd2VyIFF1ZXN0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAiTmV4dCBUZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIDogX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAiMTUlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0LWFsaWduIjogImNlbnRlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1pbi13aWR0aCI6ICItd2Via2l0LWZpbGwtYXZhaWxhYmxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb3JtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KF92bS5fcyh0cmlhbC5xdWVzdGlvbikpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpYWwucmVzcG9uc2Vfb3B0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh3b3JkLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRtYWdwaWUubWVhc3VyZW1lbnRzLnJlc3BvbnNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJG1hZ3BpZS5tZWFzdXJlbWVudHMucmVzcG9uc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAib3B0XyIgKyBpbmRleCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInJhZGlvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm9wdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHdvcmQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IF92bS5fcSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uJG1hZ3BpZS5tZWFzdXJlbWVudHMucmVzcG9uc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29yZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJHNldCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kbWFncGllLm1lYXN1cmVtZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXNwb25zZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKHdvcmQpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgMgogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX3ZtLiRtYWdwaWUubWVhc3VyZW1lbnRzLnJlc3BvbnNlCiAgICAgICAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB0cmFuc2Zvcm06ICJ0cmFuc2xhdGUoLTUwJSwgLTUwJSkiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS50b2dnbGVEaXZzKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRtYWdwaWUuc2F2ZUFuZE5leHRTY3JlZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgTmV4dCAiKV0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0KICAgICAgfSksCiAgICAgIF9jKCJTdWJtaXRSZXN1bHRzU2NyZWVuIiksCiAgICBdLAogICAgMgogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}