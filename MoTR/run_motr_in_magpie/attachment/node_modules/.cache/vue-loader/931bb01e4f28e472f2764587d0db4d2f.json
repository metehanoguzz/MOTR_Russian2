{"remainingRequest":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/magpie-base/src/components/inputs/SerialInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/magpie-base/src/components/inputs/SerialInput.vue","mtime":1705539824090},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/cache-loader/dist/cjs.js","mtime":1697083066270},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/index.js","mtime":1697083068088}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci8qKgogKiBTZXJpYWxJbnB1dHMgYWxsb3cgeW91IHRvIHJlY29yZCBpbnB1dHMgb24gYSBzZXJpZXMgb2YgaXRlbXMgdGhhdCBhcmUgaW50ZXJyZWxhdGVkIGFuZCBiZWxvbmcgdG8gdGhlIHNhbWUgdHJpYWwKICovCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnU2VyaWFsSW5wdXQnLAogIHByb3BzOiB7CiAgICAvKioKICAgICAqIFRoZSBudW1iZXIgb2YgaXRlcmF0aW9ucwogICAgICovCiAgICBpdGVyYXRpb25zOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0KICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpOiAwCiAgICB9OwogIH0sCiAgd2F0Y2g6IHsKICAgIGkoKSB7CiAgICAgIGlmICh0aGlzLmkgPj0gdGhpcy5pdGVyYXRpb25zKSB7CiAgICAgICAgLyoqCiAgICAgICAgICogRW1pdHRlZCB3aGVuIG5leHQoKSBoYXMgYmVlbiBjYWxsZWQgb24gdGhlIGxhc3QgaXRlcmF0aW9uCiAgICAgICAgICovCiAgICAgICAgdGhpcy4kZW1pdCgnZW5kJyk7CiAgICAgIH0KICAgIH0KICB9Cn07Cg=="},{"version":3,"sources":["SerialInput.vue"],"names":[],"mappings":";AAgEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SerialInput.vue","sourceRoot":"node_modules/magpie-base/src/components/inputs","sourcesContent":["<docs>\nThis is a simple implementation of a Self-paced reading task.\n\n```vue\n<Experiment>\n    <Screen>\n\n      <Slide>\n        <img src=\"img/fries.jpg\" />\n        <SerialInput\n            :iterations=\"'Hello world, how are you?'.split(' ').length\"\n            @end=\"$magpie.saveAndNextScreen()\">\n          <template #default=\"{i, record, next}\">\n            <TimerStop\n                v-if=\"i > 0\"\n                id=\"responseTime\"\n                @update:time=\"record('responseTimes', $event)\"\n            />\n            <TimerStart id=\"responseTime\" />\n            Does the sentence it the picture?\n            <KeypressInput :keys=\"{'f': 'yes', 'j': 'no', 'b' : 'maybe'}\" @update:response=\"record('pressedKey', $event); next()\" />\n            <p>{{ 'Hello world, how are you?'.split(' ')[i] }}</p>\n          </template>\n        </SerialInput>\n      </Slide>\n\n    </Screen>\n\n  <DebugResultsScreen />\n</Experiment>\n```\n\n</docs>\n\n<template>\n  <div class=\"serial_input\">\n    <div :key=\"i\" class=\"slice\">\n      <!--\n      @slot Your content for each iteration\n      @binding i {Number} The number of the current iteration, starting at 0, thus this will always be strictly lower than `iterations`\n      @binding iterations {Number} The overall number of iterations\n      @binding record {fn(variable:string, value:mixed)} A function to record trial measurements per iteration resulting in an array of values stored at $magpie.measurements.{variable}\n      @binding next {fn()} A function to go to the next iteration\n      -->\n      <slot\n        name=\"default\"\n        :i=\"i\"\n        :iterations=\"iterations\"\n        :record=\"\n          (variable, value) =>\n            $magpie.measurements[variable] &&\n            $magpie.measurements[variable].length\n              ? $magpie.measurements[variable].push(value)\n              : ($magpie.measurements[variable] = [value])\n        \"\n        :next=\"() => i++\"\n      >\n        No template defined.\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script>\n/**\n * SerialInputs allow you to record inputs on a series of items that are interrelated and belong to the same trial\n */\nexport default {\n  name: 'SerialInput',\n  props: {\n    /**\n     * The number of iterations\n     */\n    iterations: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      i: 0\n    };\n  },\n  watch: {\n    i() {\n      if (this.i >= this.iterations) {\n        /**\n         * Emitted when next() has been called on the last iteration\n         */\n        this.$emit('end');\n      }\n    }\n  }\n};\n</script>\n"]}]}