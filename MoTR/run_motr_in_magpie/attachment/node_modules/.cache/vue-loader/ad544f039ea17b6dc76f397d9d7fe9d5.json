{"remainingRequest":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/magpie-base/src/components/screens/DebugResultsScreen.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/magpie-base/src/components/screens/DebugResultsScreen.vue","mtime":1705539824071},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/cache-loader/dist/cjs.js","mtime":1697083066270},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/index.js","mtime":1697083068088}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vU2NyZWVuJzsKaW1wb3J0IHN0cmluZ2lmeSBmcm9tICdjc3Ytc3RyaW5naWZ5L2xpYi9zeW5jJzsKaW1wb3J0IFNsaWRlIGZyb20gJy4uL1NsaWRlJzsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnRGVidWdSZXN1bHRzU2NyZWVuJywKICBjb21wb25lbnRzOiB7IFNsaWRlLCBTY3JlZW4gfSwKICBwcm9wczoge30sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHJlc3VsdHM6IFtdLAogICAgICBjc3Y6ICcnCiAgICB9OwogIH0sCiAgbW91bnRlZCgpIHsKICAgIHRoaXMucmVzdWx0cyA9IHRoaXMuJG1hZ3BpZS5nZXRBbGxEYXRhKCk7CiAgICB0aGlzLmNzdiA9IHN0cmluZ2lmeSh0aGlzLnJlc3VsdHMsIHsKICAgICAgY29sdW1uczogT2JqZWN0LmtleXModGhpcy5yZXN1bHRzWzBdKSwKICAgICAgaGVhZGVyOiB0cnVlCiAgICB9KTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGRvd25sb2FkQ3N2KCkgewogICAgICBsZXQgYmxvYiA9IG5ldyBCbG9iKFt0aGlzLmNzdl0sIHsKICAgICAgICB0eXBlOiAndGV4dC9wbGFpbicsCiAgICAgICAgZW5kaW5nczogJ25hdGl2ZScKICAgICAgfSk7CiAgICAgIHRoaXMuZG93bmxvYWQoCiAgICAgICAgJ21hZ3BpZS0nICsKICAgICAgICAgIHRoaXMuJG1hZ3BpZS5pZCArCiAgICAgICAgICAnLScgKwogICAgICAgICAgbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKSArCiAgICAgICAgICAnLmNzdicsCiAgICAgICAgYmxvYgogICAgICApOwogICAgfSwKCiAgICBkb3dubG9hZChmaWxlbmFtZSwgYmxvYikgewogICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwoKICAgICAgbGV0IG9iamVjdFVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7CiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdocmVmJywgb2JqZWN0VXJsKTsKICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgZmlsZW5hbWUpOwoKICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpOwoKICAgICAgZWxlbWVudC5jbGljaygpOwoKICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChvYmplY3RVcmwpOwogICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsZW1lbnQpOwogICAgfQogIH0KfTsK"},{"version":3,"sources":["DebugResultsScreen.vue"],"names":[],"mappings":";AA6BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA","file":"DebugResultsScreen.vue","sourceRoot":"node_modules/magpie-base/src/components/screens","sourcesContent":["<docs>\nThis will display all data that has been entered into the experiment up to this point in a table.\nThis is useful for debugging.\nOnce you are gaoing live with your experiment, you can use the SubmitResultsScreen instead of this one to submit the data to the server and say thank you to the user.\n</docs>\n\n<template>\n  <Screen title=\"Results\" class=\"debugResults\">\n    <Slide>\n      <button @click=\"downloadCsv\">Download all data as csv</button>\n      <table v-if=\"results.length\">\n        <thead>\n          <tr>\n            <th v-for=\"key in Object.keys(results[0])\" :key=\"key\">{{ key }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(row, i) in results\" :key=\"i\">\n            <td v-for=\"(key, j) in Object.keys(results[0])\" :key=\"j\">\n              {{ String(row[key]) }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </Slide>\n  </Screen>\n</template>\n\n<script>\nimport Screen from '../Screen';\nimport stringify from 'csv-stringify/lib/sync';\nimport Slide from '../Slide';\n\nexport default {\n  name: 'DebugResultsScreen',\n  components: { Slide, Screen },\n  props: {},\n  data() {\n    return {\n      results: [],\n      csv: ''\n    };\n  },\n  mounted() {\n    this.results = this.$magpie.getAllData();\n    this.csv = stringify(this.results, {\n      columns: Object.keys(this.results[0]),\n      header: true\n    });\n  },\n  methods: {\n    downloadCsv() {\n      let blob = new Blob([this.csv], {\n        type: 'text/plain',\n        endings: 'native'\n      });\n      this.download(\n        'magpie-' +\n          this.$magpie.id +\n          '-' +\n          new Date().toISOString().slice(0, 10) +\n          '.csv',\n        blob\n      );\n    },\n\n    download(filename, blob) {\n      const element = document.createElement('a');\n\n      let objectUrl = URL.createObjectURL(blob);\n      element.setAttribute('href', objectUrl);\n      element.setAttribute('download', filename);\n\n      element.style.display = 'none';\n      document.body.appendChild(element);\n\n      element.click();\n\n      URL.revokeObjectURL(objectUrl);\n      document.body.removeChild(element);\n    }\n  }\n};\n</script>\n<style scoped>\ntd {\n  max-width: 150px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.debugResults {\n  overflow-x: scroll;\n}\n</style>\n"]}]}