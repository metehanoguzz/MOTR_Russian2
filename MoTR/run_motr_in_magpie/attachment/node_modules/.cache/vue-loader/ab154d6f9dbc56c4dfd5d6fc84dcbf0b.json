{"remainingRequest":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/magpie-base/src/components/inputs/SelfPacedReadingInput.vue?vue&type=style&index=0&id=f647762c&scoped=true&lang=css&","dependencies":[{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/magpie-base/src/components/inputs/SelfPacedReadingInput.vue","mtime":1705538937950},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/css-loader/dist/cjs.js","mtime":1697083066807},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1697083068254},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/postcss-loader/src/index.js","mtime":1697083067065},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/cache-loader/dist/cjs.js","mtime":1697083066270},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MOTR_Russian2/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/index.js","mtime":1697083068088}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci50ZXh0IHsKICBtYXJnaW46IDMwcHggYXV0bzsKfQoKLnRleHQgKiB7CiAgbWFyZ2luLXJpZ2h0OiA1cHg7Cn0KCi50ZXh0LnVuZGVybGluZS1zZW50ZW5jZSAqIHsKICBtYXJnaW4tcmlnaHQ6IDA7CiAgcGFkZGluZy1yaWdodDogNXB4OwogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBibGFjazsKfQoKLnRleHQudW5kZXJsaW5lLXdvcmRzICogewogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBibGFjazsKfQoKLnRleHQgOm5vdCguY3VycmVudCkgewogIGRpc3BsYXk6IG5vbmU7Cn0KCi50ZXh0LnNob3ctYWxsIDpub3QoLmN1cnJlbnQpIHsKICBjb2xvcjogdHJhbnNwYXJlbnQ7CiAgZGlzcGxheTogaW5saW5lOwp9CgoudGV4dCAuY3VycmVudCB7CiAgY29sb3I6IGJsYWNrOwogIGRpc3BsYXk6IGlubGluZTsKfQo="},{"version":3,"sources":["SelfPacedReadingInput.vue"],"names":[],"mappings":";AAyKA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"SelfPacedReadingInput.vue","sourceRoot":"node_modules/magpie-base/src/components/inputs","sourcesContent":["<docs>\n\n```vue\n<Experiment>\n    <Screen>\n        <SelfPacedReadingInput\n            :chunks=\"['This', 'is', 'a', 'nice', 'and', 'very', 'long', 'text']\"\n            word-pos=\"next\"\n            underline=\"sentence\"\n            trigger=\"$\"\n            instructions=\"Press $ to reveal the next word.\"\n            :response-times.sync=\"$magpie.measurements.times\"\n            @end=\"$magpie.saveAndNextScreen()\" />\n    </Screen>\n\n    <DebugResultsScreen />\n</Experiment>\n```\n\n</docs>\n\n<template>\n  <div>\n    <!-- length + 2, because we have an initial empty slice and a last empty slice to record the rt -->\n    <SerialInput :iterations=\"chunks.length + 2\" @end=\"end\">\n      <template #default=\"{ i, next }\">\n        <template v-if=\"timeout\">\n          <TimerStop\n            id=\"responseTime\"\n            @update:time=\"responseTimes.push($event)\"\n          />\n          <Wait :time=\"0\" @done=\"end\" />\n        </template>\n        <template v-else>\n          <TimerStop\n            v-if=\"i > 1\"\n            id=\"responseTime\"\n            @update:time=\"\n              responseTimes.push($event);\n              i > chunks.length ? next() : null;\n            \"\n          />\n          <TimerStart v-if=\"i > 0\" id=\"responseTime\" />\n          <KeypressInput\n            :keys=\"{ [trigger]: instructions }\"\n            :show-options=\"showKeypressOptions\"\n            @update:response=\"next\"\n          />\n          <Wait\n            v-if=\"responseTimeLimit !== -1 && i > 1\"\n            :time=\"responseTimeLimit\"\n            @done=\"timeout = true\"\n          />\n          <div\n            :class=\"{\n              text: true,\n              'underline-words': underline === 'words',\n              'underline-sentence': underline === 'sentence',\n              'show-all': wordPos === 'next'\n            }\"\n          >\n            <span\n              v-for=\"(chunk, j) in chunks\"\n              :key=\"j\"\n              :class=\"{ current: i - 1 === j }\"\n              v-text=\"chunk\"\n            ></span>\n          </div>\n        </template>\n      </template>\n    </SerialInput>\n  </div>\n</template>\n\n<script>\nimport KeypressInput from '../inputs/KeypressInput';\nimport SerialInput from '../inputs/SerialInput';\nimport TimerStop from '../helpers/TimerStop';\nimport TimerStart from '../helpers/TimerStart';\nimport Wait from '../helpers/Wait';\n\nexport default {\n  name: 'SelfPacedReadingInput',\n  components: { Wait, TimerStart, TimerStop, SerialInput, KeypressInput },\n  props: {\n    /**\n     * Self-paced reading text chunks\n     */\n    chunks: {\n      type: Array,\n      required: true\n    },\n    /**\n     * Give instructions on what the participant is supposed to do\n     */\n    instructions: {\n      type: String,\n      default: 'Press SPACE to reveal the words.'\n    },\n    /**\n     * The key to press to reveal the next word\n     */\n    trigger: {\n      type: String,\n      default: ' '\n    },\n    /**\n     * Underline type\n     *\n     * @values words, sentence or none\n     */\n    underline: {\n      type: String,\n      default: 'none'\n    },\n    /**\n     * Whether to show the next word at the same position or at the next\n     *\n     * @values same or next\n     */\n    wordPos: {\n      type: String,\n      default: 'same'\n    },\n    /**\n     * Whether to show the options for the KeypressInput\n     */\n    showKeypressOptions: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Maximum time alotted for a single response\n     */\n    responseTimeLimit: {\n      type: Number,\n      default: -1\n    }\n  },\n  data() {\n    return {\n      responseTimes: [],\n      timeout: false\n    };\n  },\n  methods: {\n    end() {\n      /**\n       * List of response times\n       * @property {array}\n       */\n      this.$emit('update:response-times', this.responseTimes);\n\n      /**\n       * Whether the user took more time on one item than the set response time\n       * @property {array}\n       */\n      this.$emit('update:timeout', this.timeout);\n\n      /**\n       * Emitted either when the user takes longer than the set response time, or they finish until the end of chunks.\n       */\n      this.$emit('end');\n    }\n  }\n};\n</script>\n\n<style scoped>\n.text {\n  margin: 30px auto;\n}\n\n.text * {\n  margin-right: 5px;\n}\n\n.text.underline-sentence * {\n  margin-right: 0;\n  padding-right: 5px;\n  border-bottom: 1px solid black;\n}\n\n.text.underline-words * {\n  border-bottom: 1px solid black;\n}\n\n.text :not(.current) {\n  display: none;\n}\n\n.text.show-all :not(.current) {\n  color: transparent;\n  display: inline;\n}\n\n.text .current {\n  color: black;\n  display: inline;\n}\n</style>\n"]}]}