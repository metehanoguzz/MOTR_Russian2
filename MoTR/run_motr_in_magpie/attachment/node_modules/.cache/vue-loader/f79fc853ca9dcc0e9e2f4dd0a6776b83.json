{"remainingRequest":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/magpie-base/src/components/screens/EyetrackingValidationScreen.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/magpie-base/src/components/screens/EyetrackingValidationScreen.vue","mtime":1697083068989},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/cache-loader/dist/cjs.js","mtime":1697083066270},{"path":"/Users/metehanoguzz/Desktop/MT_Colab/MoTR_Russ/MoTR/run_motr_in_magpie/attachment/node_modules/vue-loader/lib/index.js","mtime":1697083068088}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBTY3JlZW4gZnJvbSAnLi4vU2NyZWVuJzsKaW1wb3J0IFNsaWRlIGZyb20gJy4uL1NsaWRlJzsKaW1wb3J0IEV5ZXRyYWNraW5nU3RhcnQgZnJvbSAnLi4vaGVscGVycy9FeWV0cmFja2luZ1N0YXJ0JzsKaW1wb3J0IFdhaXQgZnJvbSAnLi4vaGVscGVycy9XYWl0JzsKCi8qKgogKiBJbmhlcml0cyBmcm9tIExpZmVjeWNsZVNjcmVlbgogKgogKiAqKkdsb2JhbCBNZWFzdXJlbWVudHMqKgogKgogKiB8TWVhc3VyZW1lbnR8VHlwZXxEZXNjcmlwdGlvbnwKICogfC0tfC0tLXwtLS18CiAqIHxldF9hY2N1cmFjeXxmbG9hdHxUaGUgbWVhc3VyZWQgYWNjdXJhY3l8CiAqCiAqLwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0V5ZXRyYWNraW5nVmFsaWRhdGlvblNjcmVlbicsCiAgY29tcG9uZW50czogeyBXYWl0LCBFeWV0cmFja2luZ1N0YXJ0LCBTbGlkZSwgU2NyZWVuIH0sCiAgcHJvcHM6IHsKICAgIHByZWNpc2lvbjogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDEwMAogICAgfQogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHg6IDAsCiAgICAgIHk6IDAsCiAgICAgIGNhbGlicmF0aW9uU2VxdWVuY2U6IFtdCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHdpbmRvd0hlaWdodCgpIHsKICAgICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodDsKICAgIH0sCiAgICB3aW5kb3dXaWR0aCgpIHsKICAgICAgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgbWVhc3VyZUFjY3VyYWN5KCkgewogICAgICBjb25zdCB0cmFjayA9IHRoaXMuJG1hZ3BpZS5leWV0cmFja2luZy5nZXRFeWVUcmFjaygpOwogICAgICBjb25zdCB0YXJnZXQgPSB7IHg6IHdpbmRvdy5pbm5lcldpZHRoIC8gMiwgeTogd2luZG93LmlubmVySGVpZ2h0IC8gMiB9OwogICAgICBsZXQgYWNjdXJhdGVDb3VudCA9IDAsCiAgICAgICAgZFgsCiAgICAgICAgZFksCiAgICAgICAgZGlzdGFuY2U7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhY2suZXRfeC5sZW5ndGg7IGkrKykgewogICAgICAgIGRYID0gdGFyZ2V0LnggLSB0cmFjay5ldF94W2ldOwogICAgICAgIGRZID0gdGFyZ2V0LnkgLSB0cmFjay5ldF95W2ldOwogICAgICAgIGRpc3RhbmNlID0gTWF0aC5zcXJ0KGRYICoqIDIgKyBkWSAqKiAyKTsKICAgICAgICBpZiAoZGlzdGFuY2UgPCB0aGlzLnByZWNpc2lvbikgewogICAgICAgICAgYWNjdXJhdGVDb3VudCsrOwogICAgICAgIH0KICAgICAgfQogICAgICBjb25zdCBhY2N1cmFjeSA9IGFjY3VyYXRlQ291bnQgLyB0cmFjay5ldF94Lmxlbmd0aDsKCiAgICAgIGNvbnNvbGUubG9nKCdFeWV0cmFja2luZyBhY2N1cmFjeSBhZnRlciBjYWxpYnJhdGlvbjonLCBhY2N1cmFjeSk7CgogICAgICB0aGlzLiRtYWdwaWUuYWRkRXhwRGF0YSh7IGV0X2FjY3VyYWN5OiBhY2N1cmFjeSB9KTsKICAgICAgdGhpcy4kbWFncGllLm5leHRTY3JlZW4oKTsKICAgIH0KICB9Cn07Cg=="},{"version":3,"sources":["EyetrackingValidationScreen.vue"],"names":[],"mappings":";AA8DA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA","file":"EyetrackingValidationScreen.vue","sourceRoot":"node_modules/magpie-base/src/components/screens","sourcesContent":["<docs>\nThis screen is used to initialize and calibrate eye tracking.\nEyetracking requires that you install `webgazer`.\n\n```vue\n<Experiment wide>\n  <InstructionScreen>\n    Click the button to start full screen.\n  </InstructionScreen>\n\n  <InstructionScreen>\n    <FullScreenStart />\n    Click the button to start calibration.\n  </InstructionScreen>\n\n  <!-- We'll set debugging to true so you can see something -->\n  <EyetrackingCalibrationScreen debug />\n\n  <EyetrackingValidationScreen />\n\n  <InstructionScreen>\n    Successfully calibrated!\n  </InstructionScreen>\n\n</Experiment>\n```\n</docs>\n\n<template>\n  <Screen v-bind=\"{ ...$attrs, ...$props }\">\n    <!-- Check accuracy -->\n    <Slide>\n      <p>{{ $t('screens.EyetrackingValidationScreen.instruction') }}</p>\n      <Wait :time=\"5000\" @done=\"measureAccuracy\" />\n      <EyetrackingStart />\n      <CanvasStage\n        ref=\"checkpoint\"\n        :config=\"{ width: 26, height: 26 }\"\n        :style=\"{ top: windowHeight / 2 + 'px', left: windowWidth / 2 + 'px' }\"\n        class=\"point check\"\n      >\n        <CanvasLayer>\n          <CanvasCircle\n            :config=\"{\n              x: 13,\n              y: 13,\n              fill: 'lightblue',\n              radius: 12,\n              stroke: 'black',\n              strokeWidth: 1\n            }\"\n          ></CanvasCircle>\n        </CanvasLayer>\n      </CanvasStage>\n    </Slide>\n    <Slide>\n      <p>{{ $t('screens.EyetrackingValidationScreen.error') }}</p>\n    </Slide>\n  </Screen>\n</template>\n\n<script>\nimport Screen from '../Screen';\nimport Slide from '../Slide';\nimport EyetrackingStart from '../helpers/EyetrackingStart';\nimport Wait from '../helpers/Wait';\n\n/**\n * Inherits from LifecycleScreen\n *\n * **Global Measurements**\n *\n * |Measurement|Type|Description|\n * |--|---|---|\n * |et_accuracy|float|The measured accuracy|\n *\n */\nexport default {\n  name: 'EyetrackingValidationScreen',\n  components: { Wait, EyetrackingStart, Slide, Screen },\n  props: {\n    precision: {\n      type: Number,\n      default: 100\n    }\n  },\n  data() {\n    return {\n      x: 0,\n      y: 0,\n      calibrationSequence: []\n    };\n  },\n  computed: {\n    windowHeight() {\n      return window.innerHeight;\n    },\n    windowWidth() {\n      return window.innerWidth;\n    }\n  },\n  methods: {\n    measureAccuracy() {\n      const track = this.$magpie.eyetracking.getEyeTrack();\n      const target = { x: window.innerWidth / 2, y: window.innerHeight / 2 };\n      let accurateCount = 0,\n        dX,\n        dY,\n        distance;\n      for (let i = 0; i < track.et_x.length; i++) {\n        dX = target.x - track.et_x[i];\n        dY = target.y - track.et_y[i];\n        distance = Math.sqrt(dX ** 2 + dY ** 2);\n        if (distance < this.precision) {\n          accurateCount++;\n        }\n      }\n      const accuracy = accurateCount / track.et_x.length;\n\n      console.log('Eyetracking accuracy after calibration:', accuracy);\n\n      this.$magpie.addExpData({ et_accuracy: accuracy });\n      this.$magpie.nextScreen();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.point {\n  position: absolute;\n}\n\n.point.check {\n  position: fixed;\n}\n</style>\n"]}]}